#include <PubSubClient.h>
#include <WiFi.h>

// Update these with values suitable for your network.
const char* ssid = "พิมพ์เอง"; // AP Name
const char* password = "พิมพ์เอง"; // AP Password

// Config MQTT Server
#define mqtt_server "m15.cloudmqtt.com"
#define mqtt_port 18772
#define mqtt_user "wfcsvmqa"
#define mqtt_password "IqpnVbyPDHqi"

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  // Set LED_BUILTIN 
  pinMode(LED_BUILTIN, OUTPUT);

  Serial.begin(115200);
  delay(10);

  Serial.println();

  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
      return;
    }
  } else {
    // MQTT Topic /ESP32
    client.subscribe("/ESP32");
    
    // Check if a condition is met to publish data (replace with your actual condition)
    if (shouldPublishData()) {
      // Publish data to the MQTT broker
      client.publish("/ESP32", "Your Data Here"); // Replace "Your Data Here" with your data
    }
  }
  client.loop();
}

bool shouldPublishData() {
  // Implement your condition here to determine when to publish data.
  // Return true if data should be published; otherwise, return false.
  // For example, you might want to publish data periodically or based on sensor readings.
  // Replace this example with your specific logic.
  static unsigned long lastPublishTime = 0;
  const unsigned long publishInterval = 5000; // Publish data every 5 seconds

  if (millis() - lastPublishTime >= publishInterval) {
    lastPublishTime = millis();
    return true;
  }

  return false;
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String msg = "";
  int i = 0;
  while (i < length) msg += (char)payload[i++];
  Serial.println(msg);
  digitalWrite(LED_BUILTIN, (msg == "on" ? LOW : HIGH));
}